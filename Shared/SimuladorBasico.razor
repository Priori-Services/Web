@inject IJSRuntime JS

<div class="container-fluid d-flex flex-row flex-wrap flex-lg-nowrap">
    <div class="container-fluid">
        <div class="container my-3 card p-3 bg-dark border text-light">
            <span class="fw-bold fs-3 card-title text-center text-break text-capitalize">Eu tenho: R$
                @DinheiroAtual</span>
            <input type="range" class="form-range card-body" id="SdrDinheiro" min="2" max="100" step="0.2" @oninput="(ChangeEventArgs e) => {
                    DinheiroPercent = Convert.ToDecimal(e.Value);
                    DinheiroAtual = Math.Round(DinheiroPercent.Value * 10000);
                    AtualizarGraphs();
                    AtualizarDinheiro();
                    }" />
        </div>
        <div class="container my-3 card p-3 bg-dark border text-light">
            <span class="fw-bold fs-3 card-title text-center text-break text-capitalize">Para aplicar durante:
                @PeriodoAtual
                anos</span>
            <input type="range" class="form-range card-body" id="SdrPeriodo" min="2" max="100" step="1" @oninput="(ChangeEventArgs e) => {
                    PeriodoPercent = Convert.ToDecimal(e.Value);
                    PeriodoAtual = Math.Round(Convert.ToDecimal(e.Value) * ((decimal)0.3));
                    AtualizarGraphs();
                    AtualizarDinheiro();
                    }" />
        </div>
    </div>
    <div class="container-fluid">
        <div class="container-sm m-3 p-3 card bg-dark border-0">
            <div class="row row-cols-2">
                <span class="text-light px-2">Poupan√ßa</span>
                <span class="text-light px-2 fw-italic">R$@PoupancaValue</span>
                <span class="text-primary px-2 fw-bold fs-4">LCI 12% a.a.</span>
                <span class="text-primary px-2 fw-bold fs-4">R$@InvestimentoValue</span>
            </div>
        </div>
        <hr class="m-3 p-2" />
        <div class="container-fluid">
            <div id="GraphPoupanca" class="bg-secondary my-1 py-2">
                <p>&nbsp;</p>
            </div>
            <div id="GraphInvestimento" class="bg-primary my-1 py-2">
                <p>&nbsp;</p>
            </div>
        </div>
    </div>
</div>

@code {
    private decimal? DinheiroAtual { get; set; } = 100000;
    private decimal? PeriodoAtual { get; set; } = 10;

    private decimal? DinheiroPercent { get; set; } = 25;
    private decimal? PeriodoPercent { get; set; } = 10;

    private decimal? PoupancaValue { get; set; } = 62500;
    private decimal? InvestimentoValue { get; set; } = 121000;

    private decimal? PoupancaGraph { get; set; } = 10;
    private decimal? InvestimentoGraph { get; set; } = 10;

    private int MIN_GRAPH_PERCENT { get; set; } = 10;

    public string VariableGraph(int percent) => $"width: {percent}%";
    public async void AtualizarGraphs()
    {
        PoupancaGraph = MIN_GRAPH_PERCENT + (PeriodoPercent + DinheiroPercent) / 4;
        InvestimentoGraph = MIN_GRAPH_PERCENT + (PeriodoPercent + DinheiroPercent) / 3;
        await JS.InvokeAsync<string>("widthGraphUpdate",
        "GraphPoupanca", $"{PoupancaGraph}%");
        await JS.InvokeAsync<string>("widthGraphUpdate",
        "GraphInvestimento", $"{InvestimentoGraph}%");
    }

    public void AtualizarDinheiro()
    {
        if (!DinheiroAtual.HasValue || !PeriodoAtual.HasValue)
            return;

        PoupancaValue = Math.Round(DinheiroAtual.Value * PeriodoAtual.Value * ((decimal)0.0065));
        InvestimentoValue = Math.Round(DinheiroAtual.Value * PeriodoAtual.Value * ((decimal)0.012));
    }
}
