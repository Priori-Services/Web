@inject IToastService Toast
@using PRIORI_SERVICES_WEB.Handler
@inject ILocalStorageService LocalStorage
@inject ISMTPService SMTP
@inject IAsyncService AsyncService
@using System.Net.Mail

<div class="card-body text-dark px-5">
    @if (!EmailEnviado)
    {
        <h1>Espere enquanto estamos enviando um email para confirmação...</h1>
    }
    else
    {
        @if (!CodigoCorreto)
        {
            <p class="card-text fs-4 py-2">
                Digite aqui o código de confirmação para recuperação de senha
            </p>
            <p class="card-text">
                Email utilizado: @(UsuarioFull!.email)
            </p>
            <div class="form-outline">
                <input type="text" @bind="CodigoInput" @bind:event="oninput" id="typeEmail" class="form-control my-3" />
            </div>
            <button @onclick="() => CodigoCorreto = (CodigoInput == CodigoGen)" class="btn btn-primary w-100">Verificar
                Código</button>
        }
        else
        {
            <p class="fs-3">Insira sua nova senha</p>
            <div class="form-outline">
                <input type="password" @bind="SenhaNovaInput" @bind:event="oninput" id="typeEmail" class="form-control my-3" />
            </div>

            <p class="">Confirmação de senha</p>
            <div class="form-outline">
                <input type="password" @bind="SenhaNovaConfirm" @bind:event="oninput" id="typeEmail"
                    class="form-control my-3" />
            </div>

            <i>*Será enviado mais um email para confirmação de seu email</i>

            <button @onclick="@(() => AsyncService.RunTaskAsSync(AlterarSenha))" class="btn btn-primary w-100">Alterar
                Senha</button>
        }
    }
</div>

@code {
    private bool EmailEnviado { get; set; } = false;
    private bool CodigoCorreto { get; set; } = false;
    private string CodigoGen { get; set; } = String.Empty;
    [Parameter] public UserCredentials? UsuarioFull { get; set; }
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] public IModalService Modal_Email { get; set; } = default!;
    private string CodigoInput { get; set; } = String.Empty;
    private string SenhaNovaInput { get; set; } = String.Empty;
    private string SenhaNovaConfirm { get; set; } = String.Empty;

    public struct EntradaDeErro
    {
        public bool condicao_e_valida;
        public string descricao;
    }


    protected override void OnInitialized()
    {
        PrioriVerificationEmail mail = new(
            Titulo: "Redefinição de senha Priori",
            Motivo: "Estamos lhe enviando um email de confirmação pois foi requisitado uma reinicialização de sua senha. Caso isso não seja uma requisição sua, ignore este email.",
            DigitosCodigo: 6
        );

        try
        {
            SMTP.SendVerificationMailTo(mail, UsuarioFull!.email);
        }
        catch (SmtpException)
        {
            Toast.ShowError("Falha ao enviar email");
            return;
        }

        EmailEnviado = true;
        Toast.ShowSuccess("Email enviado com sucesso!");
    }

    private async Task AlterarSenha()
    {
        var senha_checks = new EntradaDeErro[] {
new EntradaDeErro {
condicao_e_valida = (SenhaNovaInput != SenhaNovaConfirm),
descricao = "As duas senhas não conferem"
},
new EntradaDeErro {
condicao_e_valida = (!SenhaNovaInput.Any(char.IsSymbol)),
descricao = "É necessário que a senha contenha símbolos"
},
new EntradaDeErro {
condicao_e_valida = (SenhaNovaInput.Length <= 8),
descricao = "A senha deve conter mais de 8 caractéres"
},
new EntradaDeErro {
condicao_e_valida = (!SenhaNovaInput.Any(char.IsNumber)),
descricao = "A senha deve conter pelo menos um número"
},
new EntradaDeErro {
condicao_e_valida = (!SenhaNovaInput.Any(char.IsUpper)),
descricao = "A senha deve conter pelo menos um caractére maiúsculo"
},
};

        foreach (var check in senha_checks)
        {
            if (check.condicao_e_valida)
            {
                Toast.ShowError(check.descricao);
                return;
            }
        }

        Toast.ShowInfo("Enviando email de confirmação");
        var param = new ModalParameters();
        param.Add(nameof(TFAEmail.emailUser), UsuarioFull!.email);
        param.Add(nameof(TFAEmail.MensagemTFA), new PrioriVerificationEmail(
            Titulo: "Código de verificação de email para confirmação de reinicialização de senha",
            Motivo: "Este email foi enviado para confirmar a alteração de sua senha por meio da ferramenta de reinicialização da senha de nosso sistema WEB, se não foi requirido por você, favor ignorar este email.",
            DigitosCodigo: 6
        ));
        var confirmEmailModal = Modal_Email.Show<TFAEmail>("Confirmação de Email", param);
        var result = await confirmEmailModal.Result;

        if (!result.Confirmed)
        {
            Toast.ShowError("É necessária a confirmação do e-mail para prosseguir");
            return;
        } 


        const string FAILURE_STATE = "Falha ao mudar a senha";

        HttpResponseMessage response;
        try
        {
            response = await APIHandler.PutRequestAsync(new Dictionary<string, object> {
{"email", UsuarioFull!.email},
{"senha", SenhaNovaInput}}, $"/Auth/Cliente/senha/reset");
        }
        catch (Exception)
        {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        if (!response.IsSuccessStatusCode)
        {
            Toast.ShowError(FAILURE_STATE);
            Console.WriteLine(response.StatusCode);
            return;
        }

        Toast.ShowSuccess("Senha alterada com sucesso!");
        await BlazoredModal.CloseAsync();
    }
}
