@page "/contratacao"

@using PRIORI_SERVICES_WEB.Data.Model;
@using PRIORI_SERVICES_WEB.Handler;
@inject IJSRuntime JSInterop
@inject IToastService Toast
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<NavMenu nav_classes="sticky-top" />

<style>
    html, body {
        @(BackgroundGradients.BackgroundPrincipal);
    }
    .margin-simulador{
        margin-left: 25rem;
        margin-right: 25rem;
    }
</style>

<div class="rounded-3 mx-5 ">
    <p class="fonte-nav-lista text-light fonte-titulo fs-4 p-1 my-5 text-center">SIMULAÇÃO</p>
    <div class="card-body shadow-lg p-5 margin-simulador rounded-4 bg-light text-center">
        <div class="card-header d-flex flex-row bd-highlight text-dark mx-5 pt-3 justify-content-center">
            <div class="bg-@(IdInvestimentoToColor(contratacao.id_riscoInvestimento)) risco rounded-4 me-2">
                &ensp;
            </div>
            <div class="bd-highlight">
                <h4 class="p-1 text-center">@contratacao.nome</h4>
            </div>
        </div>
        <ul style="list-style-type: none;">
            <div class="d-flex flex-row container-fluid my-3">
                <div><li class="list-group-item mt-2 ms-5 text-dark" style="font-size: Large; text-align: left; letter-spacing: 0.1rem;"><b>Investimento Minimo:⠀⠀⠀⠀</b></li></div>
                <div class="text-@(IdInvestimentoToColor(contratacao.id_riscoInvestimento)) rounded-4 p-2" style="background-color: #f4f5f5; text-align: right;"><li><b>R$ @(contratacao.valor_minimo)</b></li></div>
            </div>
            <div class="d-flex flex-row container-fluid my-4">
                <div><li class="list-group-item mt-2 ms-5 text-dark" style="font-size: Large; text-align: left; letter-spacing: 0.1rem;"><b>Vencimento:⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</b></li></div>
                <div class="text-@(IdInvestimentoToColor(contratacao.id_riscoInvestimento)) rounded-4 p-2" style="background-color: #f4f5f5; text-align: right;"><li><b>@contratacao.vencimento.ToShortDateString()</B></li></div>
            </div>
            <div class="d-flex flex-row container-fluid my-4">
                <div><li class="list-group-item mt-2 ms-5 text-dark" style="font-size: Large; text-align: left; letter-spacing: 0.1rem;"><b>Rentabilidade:⠀⠀⠀⠀⠀⠀⠀⠀⠀</b></li></div>
                <div class="text-@(IdInvestimentoToColor(contratacao.id_riscoInvestimento)) rounded-4 p-2" style="background-color: #f4f5f5; text-align: right;"><li><b>@(contratacao.tipo_investimento) + @(contratacao.rentabilidade_fixa)%</b></li></div>
            </div>
            <div id="hideAll">
                <form>
                    <div class="mb-4 mx-5">
                        <label for="exampleInputEmail1" class="form-label text-dark" style="letter-spacing: 0.05rem;"><b>Valor (R$)</b></label>
                        <input type="number" class="form-control" @bind="investido">
                    </div>
                    <a href="/contratacao">
                        <button type="submit" @onclick="Ocultar" class="btn btn-outline-secondary mb-3">Simular</button>
                    </a>
                </form>
            </div>
            <div id="desocultarAll" style="display: none;">
                <hr class="mx-5 text-dark">
                <div class="d-flex flex-column">
                    <label class="text-dark fw-bold p-1 my-2">Valor Investido: ⠀⠀R$ @(investido)</label> 
                    <label class="text-dark fw-bold p-1 my-3">Retorno Bruto: ⠀⠀R$ @(result_bruto)</label>
                    <label class="text-dark fw-bold p-1 my-3">Imposto de Renda (IR): ⠀⠀R$ @(IR)</label>
                    <label class="text-dark fw-bold p-1 my-3">Retorno Líquido: ⠀⠀R$ @(liquido)</label>
                </div>
                <button type="submit" @onclick="Desocultar" class="btn btn-outline-secondary mb-4 mt-2">RE-SIMULAR</button>
                <button @onclick="ContratarActionSync" type="submit" class="btn btn-outline-primary mb-4 mt-2 ms-4">CONTRATAR</button>
                @if (saldo > investido) {
                    <p>haha</p>
                } else {
                    <button class="bg-danger text-decoration-none text-light"><a href="/">SALDO</a></button>
                }
            </div>
        </ul>
    </div>
</div>

<Footer></Footer>

@code {
    public Investimento contratacao = new Investimento {nome = "Falha ao encontrar investimentos."};
    public double saldo {get;set;} = 0;
    private string user_id {get;set;} = String.Empty;
    private double investido {get; set;}
    private double result_bruto {get;set;}
    private double IR { get;set;}
    private double liquido { get;set;}
    private bool userlogado {get;set;} = false;

    private void ContratarActionSync() {
        try {
            ContratarAction().RunSynchronously();           
        } catch (Exception) {

        }
    }

    private string IdInvestimentoToColor(decimal id) {
        switch (id) {
            case 1:
                return "success";
            case 2:
                return "warning";
            case 3:
                return "danger";
            default:
                return "danger";
        }
    }

    private async Task ContratarAction() {
        var app_token = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.app_token.ToString());
        
        if(app_token == String.Empty || app_token == "" || app_token == null) {
            NavigationManager.NavigateTo("/login");
            return;
        }

        user_id = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.user_id.ToString());

        APIHandler.static_client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", app_token);

        saldo = await APIHandler.FetchAbstractJsonObjectAsync<double>($"/Auth/Cliente/saldo/{user_id}");

        APIHandler.static_client.DefaultRequestHeaders.Authorization = null;

        if (saldo <= investido) {    
            Toast.ShowError("Seu saldo é insuficiente para contratação.");
            return;
        }
        const string FAILURE_STATE = "Falha ao contratar investimento";
        APIHandler.static_client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", app_token);
        HttpResponseMessage response;
        try {
            response = await APIHandler.PostApiRequestAsync(new Dictionary<string, object> {
            {"id_cliente_carteira",user_id},
            {"id_investimento",SimulacaoID.id_selecionado},
            {"rentabilidade_fixa",contratacao.rentabilidade_fixa},
            {"rentabilidade_variavel",contratacao.rentabilidade_variavel},
            {"data_efetuacao", DateTime.Now},
            {"valor_aplicado", investido},
            {"status", "ATIVO"},
            {"saldo", saldo - investido}
        },"/CarteiraInvestimento"); 
        } catch (Exception) {
            Toast.ShowError(FAILURE_STATE);
            return;
        } finally {
            APIHandler.static_client.DefaultRequestHeaders.Authorization = null;
        }
        
        if (!response.IsSuccessStatusCode) {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        Toast.ShowSuccess("Investimento contratado com sucesso!");

        await JSInterop.InvokeVoidAsync("ocultarelemento","btnCONTRATAR");
    }

    public void calcbruto(double investido) {
        double rentabilidadeTotal = (Convert.ToDouble(contratacao.rentabilidade_fixa) + Convert.ToDouble(contratacao.rentabilidade_variavel)) / 360;
        TimeSpan calcdiasDoInv = contratacao.vencimento - DateTime.Today;
        var totalDias = calcdiasDoInv.Days;
        double lucro =((investido * Convert.ToDouble(rentabilidadeTotal) * totalDias) / 100);
        double totalBruto = lucro + investido;
        result_bruto = Math.Round(totalBruto);
        IR = Math.Round(lucro * 0.15);
        liquido = Math.Round(result_bruto -investido - IR);
    }

    public async Task ocultarelemento() {
        await JSInterop.InvokeVoidAsync("ocultarelemento", "hideAll");
        await JSInterop.InvokeVoidAsync("desocultarelemento", "desocultarAll");
    }

    protected override async Task OnInitializedAsync()
    {
        contratacao = await APIHandler.FetchOrFallbackAsync<Investimento>(
            $"/investimento/{SimulacaoID.id_selecionado}", 
            new Investimento {nome = "Falha ao encontrar investimentos."});
    }

    private void Ocultar() {
        if (investido < Convert.ToDouble(contratacao.valor_minimo)) {
            Toast.ShowError("O valor inserido é inferior ao valor mínimo do investimento");
        } else {
            calcbruto(investido);
            try {
                ocultarelemento().RunSynchronously();
            } catch (Exception e) when (e is ObjectDisposedException || e is InvalidOperationException)
            { }
        }
    }

    private async Task desocultarasync () {
        await JSInterop.InvokeVoidAsync("desocultarelemento","hideAll");
        await JSInterop.InvokeVoidAsync("ocultarelemento","desocultarAll");
    }
    private void Desocultar() {
        try {
            desocultarasync().RunSynchronously();
        } catch (Exception e) when (e is ObjectDisposedException || e is InvalidOperationException)
        { }
    }
}
