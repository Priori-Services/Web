@page "/blog"
@using PRIORI_SERVICES_WEB.Handler
@using System.Net.Http.Headers
@inject IAsyncService AsyncService
@inject ILocalStorageService LocalStorage
@inject IToastService Toast
@inject NavigationManager NavigationManager

<NavMenu />

<style>
    body {
    @BackgroundGradients.BackgroundPrincipal
    }
</style>

<div class="d-flex flex-row container-fluid">
    <div class="container">
        &ensp;
    </div>
    <div class="container">
        &ensp;
    </div>
    <nav class="container">
        <ul class="pagination">
            <li class="page-item">
                <button class="page-link bg-warning text-white"
                @onclick="@(() => AsyncService.RunTaskAsSync(InitAdicionarAsync))">Adicionar Posts</button>
            </li>
            <li class="page-item">

                <button @onclick="@(() => AsyncService.RunTaskAsSync(InitRemoverAsync))"
                    class="page-link bg-danger text-white">Remover Posts</button>
            </li>
            <li class="page-item">
                <button @onclick="@(() => AsyncService.RunTaskAsSync(InitAlterarAsync))"
                    class="page-link bg-primary text-white">Alterar Posts</button>
            </li>
        </ul>
    </nav>
</div>

<div class="my-5 container-sm text-center">
    <div class="d-flex flex-row flex-wrap">
        @foreach (var item in PageBlogPosts)
        {
            <div class="card px-3 py-4 m-1 bg-light border rounded-4">
                <p @onclick="@(() => InitPostViewer(item, GetCategoriaBlogFromID(item.id_categoria)))"
                    class="text-dark text-decoration-none">
                <h3 class="fs-4">@item.titulo</h3>
                <p class="fw-italic">@item.descricao</p>
                <span class="badge bg-primary rounded-pill">@item.data_criacao</span>

                <span
                    class="badge bg-primary rounded-pill">@GetCategoriaBlogFromID(@item.id_categoria).nome_categoria</span>
                </p>
            </div>
        }
    </div>
</div>

@code {
    public PostBlog[] PageBlogPosts = new PostBlog[0];

    public CategoriaBlog[] PageBlogCategoria = new CategoriaBlog[0];

    [CascadingParameter] public IModalService Modal_Viewer { get; set; } = default!;

    [CascadingParameter] public IModalService Modal_Adicionar { get; set; } = default!;

    public const string NO_AUTH_FAILURE_STATE = "Você não tem permissão para adicionar posts";
    public async Task<int?> CheckUserIsConsultor(string user_id, string app_token)
    {
        int id_consultor;

        APIHandler.static_client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", app_token);
        try
        {
            id_consultor = await APIHandler.FetchAbstractJsonObjectAsync<int>($"/Auth/Cliente/idconsultor/{user_id}");
        }
        catch (Exception)
        {
            return null;
        }
        finally
        {
            APIHandler.static_client.DefaultRequestHeaders.Authorization = null;
        }

        return id_consultor;
    }

    public async Task InitAlterarAsync()
    {
        string? user_id = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.user_id.ToString());
        string? app_token = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.app_token.ToString());

        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        int? id_consultor = await CheckUserIsConsultor(user_id, app_token);

        if (id_consultor == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        var param = new ModalParameters();
        param.Add(nameof(PostAlterar.posts), PageBlogPosts);
        param.Add(nameof(PostAlterar.autor_post), id_consultor.ToString()!);
        param.Add(nameof(PostAlterar.categorias), PageBlogCategoria);
        param.Add(nameof(PostAlterar.app_token), app_token);
        var modal_remover_post = Modal_Adicionar.Show<PostAlterar>("Remover Post", param);
        var result = await modal_remover_post.Result;

        NavigationManager.NavigateTo("/blog");
    }

    public async Task InitRemoverAsync()
    {
        string? user_id = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.user_id.ToString());
        string? app_token = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.app_token.ToString());

        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        int? id_consultor = await CheckUserIsConsultor(user_id, app_token);

        if (id_consultor == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        var param = new ModalParameters();
        param.Add(nameof(PostDelete.posts), PageBlogPosts);
        param.Add(nameof(PostDelete.app_token), app_token);
        var modal_remover_post = Modal_Adicionar.Show<PostDelete>("Remover Post", param);
        var result = await modal_remover_post.Result;

        NavigationManager.NavigateTo("/blog");
    }

    public async Task InitAdicionarAsync()
    {
        string? user_id = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.user_id.ToString());
        string? app_token = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.app_token.ToString());

        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        int? id_consultor = await CheckUserIsConsultor(user_id, app_token);

        if (id_consultor == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        var param = new ModalParameters();
        param.Add(nameof(PostAdd.autor_post), id_consultor);
        param.Add(nameof(PostAdd.app_token), app_token);
        param.Add(nameof(PostAdd.AllCategorias), PageBlogCategoria);
        var modal_adicionar_post = Modal_Adicionar.Show<PostAdd>("Adicionar Post", param);
        var result = await modal_adicionar_post.Result;

        NavigationManager.NavigateTo("/blog");
    }

    public void InitPostViewer(PostBlog post_obj, CategoriaBlog categoria_obj)
    {
        var param = new ModalParameters();
        param.Add(nameof(PostViewer.PostMain), post_obj);
        param.Add(nameof(PostViewer.CategoriaMain), categoria_obj);
        Modal_Viewer.Show<PostViewer>(post_obj.titulo!, param);
    }

    public CategoriaBlog GetCategoriaBlogFromID(int id)
    {
        foreach (var categoria in PageBlogCategoria)
        {
            if (categoria.id_categoria == id)
            {
                return categoria;
            }
        }
        return new CategoriaBlog
            {
                nome_categoria = "Falha ao encontrar categoria"
            };
    }

    protected override async Task OnInitializedAsync()
    {
        PageBlogPosts = await APIHandler.FetchOrFallbackAsync<PostBlog[]>(
        "/Blog/Posts",
        new PostBlog[] { new PostBlog { titulo = "Falha ao encontrar posts" } }
        );

        PageBlogCategoria = await APIHandler.FetchOrFallbackAsync<CategoriaBlog[]>(
        "/Blog/Categorias",
        new CategoriaBlog[]{
new CategoriaBlog {
id_categoria = 999,
nome_categoria = "Falha ao encontrar categoria"
}
        });
    }
}
