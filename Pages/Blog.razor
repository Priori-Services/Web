@page "/blog"
@using System.Text;
@inject HttpClient HttpClient
@using System.Text.Json;
@using PRIORI_SERVICES_WEB.Data

<nav class="container-fluid">
    <ul class="pagination">
        <button class="btn btn-primary mr-3" on:click={reset_categorias}> Limpar </button>
        {#each data.categorias as categoria}
        <li class="page-item">
            <button class="page-link" on:click={()=> hide_other_categories(categoria)}
                >{categoria.nome_categoria}</button>
        </li>
        {/each}
    </ul>
</nav>

<div class="my-5 container-fluid text-center">
    <div class="row row-cols-3">
        @foreach (var item in PageBlogPosts)
        {
            <a href="/blog/post/@item.id_post"
                class="container-sm border px-3 py-3 [categoria_{post.id_categoria}] page-link">
                <span class="fs-4">@item.titulo</span>
                <p class="fw-italic">@item.descricao</p>
                <span class="badge bg-primary">@item.data_criacao</span>
                <span class="badge bg-primary">@GetCategoriaNomeFromID(@item.id_categoria)</span>
                <span class="badge bg-primary"></span>
            </a>
        }
    </div>
</div>

@code {

    public PostBlog[] PageBlogPosts = new PostBlog[0];

    public async Task<PostBlog[]?> GetPostsAsync() {
        return await JsonSerializer.DeserializeAsync<PostBlog[]>(await FetchAbstractJsonObjectAsync(null, "api/Blog/Posts"));
    }

    public string GetCategoriaNomeFromID(int id_categoria) {
        CategoriaBlog? amogus = JsonSerializer.Deserialize<CategoriaBlog>(FetchAbstractJsonObject(null, $"api/Blog/Categorias/{id_categoria}"));
        if (amogus == null || amogus.nome_categoria == null) {
            throw new NullReferenceException("Failure to parse categoria from API JSON object");
        }
        return amogus.nome_categoria;
    }

    public MemoryStream FetchAbstractJsonObject(string? api_endpoint, string target_url) {
        Console.WriteLine($"http://{api_endpoint ?? DefaultConfig.API_ENDPOINT}/{target_url}");
        string? response = new HttpClient().GetStringAsync($"http://{api_endpoint ?? DefaultConfig.API_ENDPOINT}/{target_url}").Result;
        return new MemoryStream(Encoding.UTF8.GetBytes(response));
    }

    public async Task<MemoryStream> FetchAbstractJsonObjectAsync(string? api_endpoint, string target_url) {
        Console.WriteLine($"http://{api_endpoint ?? DefaultConfig.API_ENDPOINT}/{target_url}");
        string? response = await new HttpClient().GetStringAsync($"http://{api_endpoint ?? DefaultConfig.API_ENDPOINT}/{target_url}");
        return new MemoryStream(Encoding.UTF8.GetBytes(response));
    }

    protected override async Task OnInitializedAsync()
    {
        var blogposts = await GetPostsAsync();
        if (blogposts == null) {
            throw new NullReferenceException("Failure to find API call thing fodase");
        }
        PageBlogPosts = blogposts;
    }
}