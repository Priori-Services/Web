@page "/blog"
@using PRIORI_SERVICES_WEB.Handler
@using System.Net.Http.Headers
@inject IAsyncService AsyncService
@inject ILocalStorageService LocalStorage
@inject IToastService Toast
@inject NavigationManager NavigationManager

<NavMenu nav_classes="sticky-top" />

<style>
    body {
    @BackgroundGradients.BackgroundPrincipal
    }

    .fonte-blog {
        font-family: "Poppins", sans-serif;
        line-height: 2;
        font-weight: 150;
        margin-left: 200px;
        margin-right: 200px;
        letter-spacing: 2px;
    }
</style>
<div class="container mt-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="row">
                <div class="col-lg-14">
                    <div class="card mb-4">
                        <div class="card-body">
                            @foreach (var item in PageBlogPosts)
                            {
                                <div class="card px-3 py-3 m-3 border rounded-3 bg-white">
                                    <p @onclick="@(() => InitPostViewer(item, GetCategoriaBlogFromID(item.id_categoria)))"
                                        class="text-dark text-decoration-none">

                                    <div class="small text-muted">@item.data_criacao</div>
                                    <h2 class="card-title h4">@item.titulo</h2>
                                    <p class="card-text">@item.descricao</p>

                                    <span
                                        class="badge bg-primary rounded-pill">@GetCategoriaBlogFromID(@item.id_categoria).nome_categoria</span>
                                    </p>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card mb-4">
                <div class="card-header">Boas vindas!</div>
                <div class="card-body">
                    Sabia que a <i>Priori</i> sempre traz inovação pensando nos nossos clientes?
                    Aproveite!
                </div>
            </div>
            <div class="card mb-4">
                <div class="card-header">Cartegorias
                    @if (CurrentCategoria != null)
                    {
                        <button class="badge bg-primary"
                            @onclick="@(() => {
                                PageBlogPosts = PageBlogPostsIMMUTABLE;
                                CurrentCategoria = null;
                            })">Limpar</button>
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-6">
                            
                            <ul class="list-unstyled text-white">
                                @foreach (var categoria in PageBlogCategoria)
                                {
                                    <li class="m-1 badge bg-primary rounded-pill"
                                        @onclick="@(() => RefreshBlogPosts(categoria.id_categoria))">
                                        @(categoria.nome_categoria)</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @if (SimulacaoID.IsUserConsultor != null)
            {
                <div class="card mb-4">
                    <div class="card-header mb-3">Funções de Consultor</div>
                    <nav class="container">
                        <ul class="pagination">
                            <li class="page-item me-3">
                                <button class="page-link bg-warning text-white"
                                    @onclick="@(() => AsyncService.RunTaskAsSync(InitAdicionarAsync))">Adicionar
                                    Post</button>
                            </li>
                            <li class="page-item me-3">
                                <button @onclick="@(() => AsyncService.RunTaskAsSync(InitRemoverAsync))"
                                    class="page-link bg-danger text-white">Remover Post</button>
                            </li>
                            <li class="page-item">
                                <button @onclick="@(() => AsyncService.RunTaskAsSync(InitAlterarAsync))"
                                    class="page-link bg-primary text-white">Editar Post</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

<Footer />

@code {
    public PostBlog[] PageBlogPostsIMMUTABLE = new PostBlog[0];
    public PostBlog[] PageBlogPosts = new PostBlog[0];
    public CategoriaBlog[] PageBlogCategoria = new CategoriaBlog[0];
    public int? CurrentCategoria;
    private string? user_id { get; set; }
    private string? app_token { get; set; }
    public bool isUserConsultor { get; set; } = false;
    [CascadingParameter] public IModalService Modal_Viewer { get; set; } = default!;
    [CascadingParameter] public IModalService Modal_Adicionar { get; set; } = default!;
    public const string NO_AUTH_FAILURE_STATE = "Você não tem permissão para adicionar posts";

    public void RefreshBlogPosts(int id_categoria)
    {
        PageBlogPosts = (from blogpost in PageBlogPostsIMMUTABLE
                         where blogpost.id_categoria == id_categoria
                         select blogpost).ToArray();
        CurrentCategoria = id_categoria;
        StateHasChanged();
    }

    public async Task<int?> CheckUserIsConsultor()
    {
        int id_consultor;

        APIHandler.static_client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", app_token);
        try
        {
            id_consultor = await APIHandler.FetchAbstractJsonObjectAsync<int>($"/Auth/Cliente/idconsultor/{user_id}");
        }
        catch (Exception)
        {
            return null;
        }
        finally
        {
            APIHandler.static_client.DefaultRequestHeaders.Authorization = null;
        }

        return id_consultor;
    }

    public async Task InitAlterarAsync()
    {
        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        if (SimulacaoID.IsUserConsultor == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        var param = new ModalParameters();
        param.Add(nameof(PostAlterar.posts), PageBlogPosts);
        param.Add(nameof(PostAlterar.autor_post), SimulacaoID.IsUserConsultor.ToString()!);
        param.Add(nameof(PostAlterar.categorias), PageBlogCategoria);
        param.Add(nameof(PostAlterar.app_token), app_token);
        var modal_remover_post = Modal_Adicionar.Show<PostAlterar>("Remover Post", param);
        var result = await modal_remover_post.Result;

        if (!result.Confirmed)
            return;

        NavigationManager.NavigateTo("/blog", forceLoad: true);   
    }


    public async Task InitRemoverAsync()
    {
        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        if (SimulacaoID.IsUserConsultor == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        var param = new ModalParameters();
        param.Add(nameof(PostDelete.posts), PageBlogPosts);
        param.Add(nameof(PostDelete.app_token), app_token);
        var modal_remover_post = Modal_Adicionar.Show<PostDelete>("Remover Post", param);
        var result = await modal_remover_post.Result;

        if (!result.Confirmed)
            return;

        NavigationManager.NavigateTo("/blog", forceLoad: true);
    }

    public async Task InitAdicionarAsync()
    {
        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        if (SimulacaoID.IsUserConsultor == null)
        {
            Toast.ShowError(NO_AUTH_FAILURE_STATE);
            return;
        }

        var param = new ModalParameters();
        param.Add(nameof(PostAdd.autor_post), SimulacaoID.IsUserConsultor);
        param.Add(nameof(PostAdd.app_token), app_token);
        param.Add(nameof(PostAdd.AllCategorias), PageBlogCategoria);
        var modal_adicionar_post = Modal_Adicionar.Show<PostAdd>("Adicionar Post", param);
        var result = await modal_adicionar_post.Result;

        if (!result.Confirmed)
            return;

        NavigationManager.NavigateTo("/blog", forceLoad: true);
    }

    public void InitPostViewer(PostBlog post_obj, CategoriaBlog categoria_obj)
    {
        SimulacaoID.PostMain = post_obj;
        SimulacaoID.CategoriaMain = categoria_obj;
        NavigationManager.NavigateTo("/blog-viewer");
    }

    public CategoriaBlog GetCategoriaBlogFromID(int id)
    {
        foreach (var categoria in PageBlogCategoria)
        {
            if (categoria.id_categoria == id)
            {
                return categoria;
            }
        }
        return new CategoriaBlog
            {
                nome_categoria = "Falha ao encontrar categoria"
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        user_id = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.user_id.ToString());
        app_token = await LocalStorage.GetItemAsStringAsync(LocalStorageKeys.app_token.ToString());

        if (user_id == "" || user_id == String.Empty || user_id == null ||
        app_token == "" || app_token == String.Empty || app_token == null)
        {
            return;
        }

        SimulacaoID.IsUserConsultor = await CheckUserIsConsultor();

        isUserConsultor = !(SimulacaoID.IsUserConsultor == null);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        PageBlogPosts = await APIHandler.FetchOrFallbackAsync<PostBlog[]>(
        "/Blog/Posts",
        new PostBlog[] { new PostBlog { titulo = "Falha ao encontrar posts" } }
        );

        PageBlogCategoria = await APIHandler.FetchOrFallbackAsync<CategoriaBlog[]>(
        "/Blog/Categorias",
        new CategoriaBlog[]{
new CategoriaBlog {
id_categoria = 999,
nome_categoria = "Falha ao encontrar categoria"
}
        });

        PageBlogPostsIMMUTABLE = PageBlogPosts;
    }
}
