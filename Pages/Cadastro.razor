@page "/cadastro"
@using PRIORI_SERVICES_WEB.Handler
@using PRIORI_SERVICES_WEB.Data.Types
@using PRIORI_SERVICES_WEB.Data.Model
@inject IJSRuntime JSInterop
@inject NavigationManager NavigationManager
@inject IToastService Toast
@inject IAsyncService AsyncService
@inject ILocalStorageService LocalStorage

<NavMenu nav_classes="sticky-top" />

<style>
    .fonteInfo {
        font-size: 1.3rem;
    }

    .detalhes {
        font-size: 0.8rem;
        padding-left: 0.8rem;
    }

    html,
    body {
    @(BackgroundGradients.BackgroundPrincipal)
    }
</style>


<div class="container-fluid d-flex align-items-center flex-column my-3">

    <div class="container-fluid text-center">
        <h1 class="fs-1 fw-bold" style="font-family: 'Poppins', sans-serif; letter-spacing: 1px;">Cadastro</h1>
    </div>

    <!-- Pills content -->
    <div class="tab-pane d-flex flex-column" id="pills-register" role="tabpanel" aria-labelledby="tab-register">
        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registrarNome">Nome Completo</label>
            <input type="text" @bind="usuario.nome" @bind:event="oninput" class="form-control" required />
        </div>

        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registrarCPF">CPF</label>
            <input type="text" @bind="usuario.cpf" @bind:event="oninput" class="form-control" required maxlength="11" />
        </div>

        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registrarEndereco">Endereço</label>
            <input type="text" @bind="usuario.endereco" @bind:event="oninput" class="form-control" required
                maxlength="50" />
        </div>

        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registrarDataNASCIMENTO">Data de Nascimento</label>
            <span class="detalhes">necessária pra identificar a maioridade</span>
            <input type="date" @bind="dataNascimento" @bind:event="oninput" class="form-control" required />
        </div>

        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registrarEmail">E-mail</label>
            <span class="detalhes">você vai precisar ativar sua conta depois de criar seu cadastro</span>
            <input type="email" @bind="usuario.email" @bind:event="oninput" class="form-control" required />
        </div>

        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registerPassword">Senha</label>
            <input type="password" @bind="usuario.senha" @bind:event="oninput" class="form-control" required />
        </div>

        <div class="form-outline mb-4">
            <label class="form-label fonteInfo" for="registerRepeatPassword">Confirme sua senha</label>
            <input type="password" @bind="confirmacaoSenhaLogin" @bind:event="oninput" class="form-control" required />
        </div>

        <div class="form-check d-flex justify-content-center mb-4">
            <input class="form-check-input me-2" type="checkbox" value="" @bind="registerCheck"
                aria-describedby="registerCheckHelpText" required />
            <label class="form-check-label" for="registerCheck">
                Li e concordo com os <a class="text-light" href="/termos-de-uso"> termos de uso</a>
            </label>
        </div>

        <button formaction="post" @onclick="@(() => AsyncService.RunTaskAsSync(CadastroUser))"
            class="text-center btn btn-outline-light px-4 py-2 fs-5 ">
            CADASTRAR
        </button>
    </div>
</div>

@code {
    public struct EntradaDeErro
    {
        public bool condicao_e_valida;
        public string descricao;
    }
    public ClienteDBO usuario = new ClienteDBO();
    public DateTime dataNascimento { get; set; } = DateTime.Now;
    public string confirmacaoSenhaLogin { get; set; } = String.Empty;
    public bool registerCheck { get; set; } = false;
    [CascadingParameter] public IModalService Modal_Email { get; set; } = default!;
    [CascadingParameter] public IModalService Modal_Saldo { get; set; } = default!;

    public async Task CadastroUser() {

        foreach (var prop in usuario.GetType().GetProperties())
        {
            if (prop.GetValue(usuario, null) == null)
            {
                Toast.ShowError("É necessário preencher todos os campos para proceder!");
                return;
            }
        }

        var main_checks = new EntradaDeErro[] {
new EntradaDeErro {
condicao_e_valida = (registerCheck == false),
descricao = "É necessário concordar com os termos de uso para prosseguir."
},
new EntradaDeErro {
condicao_e_valida = ((DateTime.Now.Year - dataNascimento.Year) <= 18),
descricao = "Você deve possuir mais de 18 anos para utilizar nossos serviços"
},
new EntradaDeErro {
condicao_e_valida = (usuario.senha != confirmacaoSenhaLogin),
descricao = "As duas senhas não conferem"
},
new EntradaDeErro {
condicao_e_valida = (!usuario.senha!.Any(char.IsSymbol)),
descricao = "´necessário que a senha contenha símbolos"
},
new EntradaDeErro {
condicao_e_valida = (usuario.senha!.Length <= 8),
descricao = "A senha deve conter mais de 8 caractéres"
},
new EntradaDeErro {
condicao_e_valida = (!usuario.senha.Any(char.IsNumber)),
descricao = "A senha deve conter pelo menos um número"
},
new EntradaDeErro {
condicao_e_valida = (!usuario.senha.Any(char.IsUpper)),
descricao = "A senha deve conter pelo menos um caractére maiúsculo"
},
new EntradaDeErro {
condicao_e_valida = (usuario.cpf!.Length > 11),
descricao = "O CPF digitado é inválido"
}
};

        foreach (var check in main_checks)
        {
            if (check.condicao_e_valida)
            {
                Toast.ShowError(check.descricao);
                return;
            }
        }


        Toast.ShowInfo("Enviando email de confirmação");
        var param = new ModalParameters().Add(nameof(TFACadastro.emailUser), usuario.email!);
        var confirmEmailModal = Modal_Email.Show<TFACadastro>("Confirmação de Email", param);
        var result = await confirmEmailModal.Result;

        if (!result.Confirmed)
        {
            Toast.ShowError("É necessária a confirmação do e-mail para prosseguir");
            return;
        } 

        HttpResponseMessage response = null!;
        try
        {
            response = await APIHandler.PostApiRequestAsync(new Dictionary<string, object> {
{"nome", usuario.nome!},
{"senha", usuario.senha!},
{"cpf", usuario.cpf!},
{"email", usuario.email!},
{"endereco", usuario.endereco!},
{"dataNascimento", $"{dataNascimento.Day}/{dataNascimento.Month}/{dataNascimento.Year}"},
{"respostaAssessoria", RespostaAssessoria.aceitou}}, "/Auth/Cliente/registrar");
        } // Podemos implicitamente associar o aceitar do usuário aqui pq pra chegar até aqui tivemos checks disso.
        catch (Exception)
        {
            Toast.ShowError("Houve um erro ao cadastrar, tente novamente");
            return;
        }

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        Toast.ShowError($"Falha ao cadastrar, tente novamente {await response.Content.ReadAsStringAsync()}");
    }
}
