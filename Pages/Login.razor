@page "/login"
@using PRIORI_SERVICES_WEB.Handler
@using PRIORI_SERVICES_WEB.Data.Types
@inject IJSRuntime JSInterop
@inject NavigationManager NavigationManager
@inject IToastService Toast
@inject ILocalStorageService LocalStorage
@inject IModalService Modal
@inject IAsyncService AsyncService
@using System.Net.Http.Headers

<style>
    ::-webkit-scrollbar {
        display: none;
    }

    body {
    @(BackgroundGradients.BackgroundPrincipal);
    }
</style>


<NavMenu />

<section class="bg-transparent py-5 container-fluid row d-flex flex-row justify-content-center align-items-center">
    <div class="col-md-9 col-lg-6 col-xl-5">
        <img src="assets/inv1Img.png" width="85%" class="img-fluid" alt="Sample image">
    </div>
    <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
        <form>
            <div class="d-flex m-3 flex-row align-items-center justify-content-center justify-content-lg-start">
                <p class="lead fw-normal mb-0 me-3 ">
                    <i class="bi bi-lock"></i>
                    Login
                </p>
            </div>

            <div class="form-outline mb-4">
                <label class="form-label" for="form3Example3">E-mail</label>
                <input type="email" id="emailLogin" class="form-control form-control-lg text-white bg-transparent"
                @bind="user.email" />
            </div>

            <div class="form-outline mb-3">
                <label class="form-label" for="form3Example4">Senha</label>
                <input type="password" id="senhaLogin" class="form-control form-control-lg bg-transparent text-white"
                @bind="user.senha" />
            </div>
            <div class="d-flex justify-content-between align-items-center">
                <p @onclick="EsqueceuASenhaModal" class="link-danger text-decoration-none">Esqueceu a senha?</p>
            </div>
            <div class="text-center text-lg-start mt-4 pt-2">
                <button type="button" class="btn btn-outline-light text-white px-5 py-3 my-3"
                @onclick="@(() => AsyncService.RunTaskAsSync(LoginUser))">Acessar</button>
                <p class="small fw-bold mt-2 pt-1 mb-0">Não possui cadastro?
                    <a href="/cadastro" class="link-danger text-decoration-none">Registre-se</a>
                </p>
            </div>
        </form>
    </div>
</section>
@code {
    [CascadingParameter] public IModalService Modal_Alteracao { get; set; } = default!;

    [CascadingParameter] public IModalService Modal_Saldo { get; set; } = default!;
    private UserCredentials user { get; set; } = new UserCredentials();

    public async Task LoginUser()
    {
        const string FAILURE_STATE = "Falha ao fazer login";

        if (user.email == String.Empty || user.email == "" || user.email == null ||
            user.senha == String.Empty || user.senha == "" || user.senha == null) {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        HttpResponseMessage? response;
        try
        {
            response = await APIHandler.PostApiRequestAsync(new Dictionary<string, object> {
{"email", user.email},
{"senha", user.senha}
}, "/Auth/Cliente/login");
        }
        catch (Exception)
        {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        if (!response.IsSuccessStatusCode)
        {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        var ID_JWT = await System.Text.Json.JsonSerializer.DeserializeAsync<Dictionary<string, string>?>(
        await response.Content.ReadAsStreamAsync()
        );
        if (ID_JWT == null)
        {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        try
        {
            await LocalStorage.SetItemAsStringAsync(LocalStorageKeys.user_id.ToString(), ID_JWT["id"]);
            await LocalStorage.SetItemAsStringAsync(LocalStorageKeys.app_token.ToString(), ID_JWT["jwt_key"]);
        }
        catch (KeyNotFoundException)
        {
            Toast.ShowError(FAILURE_STATE);
            return;
        }

        APIHandler.static_client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", ID_JWT["jwt_key"]);

        string saldouser = (await APIHandler.FetchOrFallbackAsync<decimal>($"/CarteiraInvestimento/saldo/{ID_JWT["id"]}", 0)).ToString();

        APIHandler.static_client.DefaultRequestHeaders.Authorization = null;

        if (Convert.ToInt32(saldouser) != 0)
            return;

        var paramsaldo = new ModalParameters();
        paramsaldo.Add(nameof(InsercaoDeSaldo.saldoUser), saldouser);
        paramsaldo.Add(nameof(InsercaoDeSaldo.app_token), ID_JWT["jwt_key"]);
        paramsaldo.Add(nameof(InsercaoDeSaldo.userid), ID_JWT["id"]);
        Modal_Saldo.Show<InsercaoDeSaldo>("Inserir saldo", paramsaldo);
    }

    public void EsqueceuASenhaModal()
    {
        if (user.email == String.Empty || user.email == "" || user.email == null) {
            Toast.ShowError("Digite um email antes de reiniciar sua senha");
            return;
        }

        Toast.ShowInfo("Enviando email...");
        var param = new ModalParameters().Add(nameof(EsqueceuASenha.UsuarioFull), user);
        var result = Modal_Alteracao.Show<EsqueceuASenha>("Esqueci a senha", param);
        @*TODO: se o modal ser cancelado, navegar o usuário p/ o index, caso contrário, p/ contratação*@
    }
}

