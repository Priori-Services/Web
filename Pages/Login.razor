@page "/login"
@using PRIORI_SERVICES_WEB.Handler
@using PRIORI_SERVICES_WEB.Data.Types
@inject IJSRuntime JSInterop
@inject NavigationManager NavigationManager
@inject IToastService Toast
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    ::-webkit-scrollbar {
        display: none;
    }

    body {
        background-image: linear-gradient(75deg, rgb(211, 35, 218), rgb(114, 0, 167));
    }
</style>


<NavMenu nav_classes="sticky-top" nav_style="" />

<section class="bg-transparent py-5 container-fluid row d-flex flex-row justify-content-center align-items-center">
    <div class="col-md-9 col-lg-6 col-xl-5">
        <img src="assets/inv1Img.png" width="85%" class="img-fluid" alt="Sample image">
    </div>
    <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
        <form>
            <div class="d-flex m-3 flex-row align-items-center justify-content-center justify-content-lg-start">
                <p class="lead fw-normal mb-0 me-3 ">
                    <i class="bi bi-lock"></i>
                    Login
                </p>
            </div>
            <!-- Email input -->
            <div class="form-outline mb-4">
                <label class="form-label" for="form3Example3">E-mail</label>
                <input type="email" id="emailLogin" class="form-control form-control-lg text-white bg-transparent"
                @bind="logged_user.email" />
            </div>
            <!-- Password input -->
            <div class="form-outline mb-3">
                <label class="form-label" for="form3Example4">Senha</label>
                <input type="password" id="senhaLogin" class="form-control form-control-lg bg-transparent text-white"
                @bind="logged_user.senha" />
            </div>
            <div class="d-flex justify-content-between align-items-center">
                <!-- Checkbox -->
                <div class="form-check mb-0">
                    <input class="form-check-input me-2" type="checkbox" value="" id="permanecerConectado" />
                    <label class="form-check-label" for="form2Example3">
                        Permanecer conectado
                    </label>
                </div>
                <a href="#!" class="text-light">Esqueceu sua senha?</a>
            </div>
            <div class="text-center text-lg-start mt-4 pt-2">
                <button type="button" class="btn btn-outline-light text-white px-5 py-3 my-3"
                @onclick="login_user_wrapper">Acessar</button>
                <p class="small fw-bold mt-2 pt-1 mb-0">NÃ£o possui cadastro?
                    <a href="/cadastro" class="link-danger">Registre-se</a>
                </p>
            </div>
        </form>
    </div>
</section>

@code {
    protected class UserLogin
    {
        public string senha { get; set; } = String.Empty;
        public string email { get; set; } = String.Empty;
    }
    protected UserLogin logged_user { get; set; } = new UserLogin();
    private const string TOAST_ERROR_MSG = "Falha ao fazer login";

    public void login_user_wrapper()
    {
        try { LoginUserAsync().RunSynchronously(); }
        catch (Exception) { }
    }

    public async Task LoginUserAsync()
    {
        HttpResponseMessage? response;
        try
        {
            response = await APIHandler.PostApiRequestAsync(new Dictionary<string, object> {
{"email", logged_user.email},
{"senha", logged_user.senha}
}, "/Auth/Cliente/login");
        }
        catch (Exception)
        {
            Toast.ShowError(TOAST_ERROR_MSG);
            return;
        }

        if (!response.IsSuccessStatusCode)
        {
            Toast.ShowError(TOAST_ERROR_MSG);
            return;
        }

        var JWTOBJ = await System.Text.Json.JsonSerializer.DeserializeAsync<Dictionary<string, string>?>(
        await response.Content.ReadAsStreamAsync()
        );
        if (JWTOBJ == null)
        {
            Toast.ShowError(TOAST_ERROR_MSG);
            return;
        }

        try
        {
            await LocalStorage.SetItemAsStringAsync(LocalStorageKeys.user_id.ToString(), JWTOBJ["id"]);
            await LocalStorage.SetItemAsStringAsync(LocalStorageKeys.app_token.ToString(), JWTOBJ["jwt_key"]);
        }
        catch (KeyNotFoundException)
        {
            Toast.ShowError(TOAST_ERROR_MSG);
            return;
        }
        NavigationManager.NavigateTo("/");
    }
}
}
